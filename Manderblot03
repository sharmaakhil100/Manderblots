float modulus = 0;

void setup() {
  size(800, 800);
  colorMode(HSB, 300); // Using HSB mode instead of RGB
  drawImage();
}

float huePicker(int n) {
  // n is num of iterations before passing escape radius
  // selects a hue with an algorithm depending 
  // on the value of modulus before passing the
  // escape radius
  return n - (log (log (sqrt(modulus))));
}

void drawImage() {
  // Creates an image based on the Julia Set fractals
  /* general aglorithm: for every pixel, 
   iterate z_new = z_oldÂ² + c 
   on the complex plane (represented by XY plane here)
   until it leaves a 
   circle around the 
   origin with given escapeRadius. 
   The number of iterations 
   it the color of the pixel */
  // c = a + bi where c is a complex number
  float creal = -0.7; // represents the "a" constant
  float cimaginary = .27015; // represents the "b" constant
  float escapeRadius = 14.0; // 
  
  //Establish values for the complex plane
  //where x-axis represents the "real" component
  //and the y-axis represents the "imaginary" component.
  //Adjust to zoom in/out to different regions.
  
  float xupperbound = 0.4;
  float yupperbound = (xupperbound * height) / width;

  // Initial Position of image. Adjust to move around.
  float xlowerbound = -xupperbound/2;
  float ylowerbound = -yupperbound/2;

  // only do once because it only draws once
  loadPixels();

  // Max iterations for each pixel
  int maxiterations = 220;

  // x goes from xlowerbound to xupperbound
  float xmax = xlowerbound + xupperbound;
  // y goes from ylowerbound to yupperbound
  float ymax = ylowerbound + yupperbound;

  // creallculate amount we increment x,y for each pixel
  float dx = (xmax - xlowerbound) / (width);
  float dy = (ymax - ylowerbound) / (height);

  // Start y
  float y = ylowerbound;
  for (int j = 0; j < height; j++) {
    // Start x
    float x = xlowerbound;
    for (int i = 0; i < width; i++) {
      // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?
      float a = x;
      float b = y;
      int n = 0;
      while (n < maxiterations) {
        float aa = a * a;
        float bb = b * b;
         // Infinty in our finite world is simple, let's just consider it 16
        if (sqrt(aa*aa + bb*bb) > escapeRadius) {
          modulus = aa*aa + bb*bb;
          break;  // Bail
        }
        float twoab = 2.0 * a * b;
        a = aa - bb + creal;
        b = twoab + cimaginary;
        n++;
      }

      // We color each pixel based on how long it takes to get to infinity
      // If we never got there, let's pick the color black
      if (n == maxiterations) {
        pixels[i+j*width] = color(0); // 
      } else {
        float hue = huePicker(n);
        pixels[i+j*width] = color(hue, 255, 255);
      }
      x += dx;
    }
    y += dy;
  }
  updatePixels();
}

