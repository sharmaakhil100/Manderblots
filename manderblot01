 /*for every pixel, 
 iterate znew = zoldÂ² + c 
 on the complex plane 
 until it leaves the 
 circle around the 
 origin with radius 2. 
 The number of iterations 
 it the color of the pixel */
 
float angle = 0;

void setup() {
  size(800, 800);
  colorMode(HSB, 1);
  float ca = -0.7;
  float cb = .27015;
  
  // Establish a range of values on the complex plane
  // A different range will allow us to "zoom" in or out on the fractal
  // It all starts with the width, try higher or lower values
  float w = 0.3;
  float h = (w * height) / width;

  // Start at negative half the width and height
  float xmin = -w/2;
  float ymin = -h/2;

  // Make sure we can write to the pixels[] array.
  // Only need to do this once since we don't do any other drawing.
  loadPixels();

  // Maximum number of iterations for each point on the complex plane
  int maxiterations = 150;

  // x goes from xmin to xmax
  float xmax = xmin + w;
  // y goes from ymin to ymax
  float ymax = ymin + h;

  // Calculate amount we increment x,y for each pixel
  float dx = (xmax - xmin) / (width);
  float dy = (ymax - ymin) / (height);

  // Start y
  float y = ymin;
  for (int j = 0; j < height; j++) {
    // Start x
    float x = xmin;
    for (int i = 0; i < width; i++) {
      // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?
      float a = x;
      float b = y;
      int n = 0;
      while (n < maxiterations) {
        float aa = a * a;
        float bb = b * b;
         // Infinty in our finite world is simple, let's just consider it 16
        if (aa*aa + bb*bb > 4.0) {
          break;  // Bail
        }
        float twoab = 2.0 * a * b;
        a = aa - bb + ca;
        b = twoab + cb;
       
        
        n++;
      }

      // We color each pixel based on how long it takes to get to infinity
      // If we never got there, let's pick the color black
      if (n == maxiterations) {
        pixels[i+j*width] = color(0);
      } else {
        float hue = sqrt(float(n) / maxiterations);
        pixels[i+j*width] = color(hue, 255, 255);
      }
      x += dx;
    }
    y += dy;
  }
  updatePixels();
}
void draw() {
  
  //float ca = map(mouseX, 0, width, -1, 1);
  //float cb = map(mouseY, 0, width, -1, 1);
  
  
  //println(frameRate);
}
