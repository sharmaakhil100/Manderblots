import codeanticode.syphon.*;
import processing.sound.*;
SoundFile file;
Amplitude amp;
SyphonServer server;

float norm = 0;
float angle = 0;
float w = 5;
float h = (w * height) / width;
//int seconds = 0;
boolean zoomIn = false;
int initialTime;
int interval = 1000;
int time;

void setup() {
  size(400, 400, P2D);
  server = new SyphonServer(this, "Processing Syphon");
  colorMode(HSB, 60); // 100
  initialTime = millis();
  w -= 7;
  h -= 7;
  file = new SoundFile(this, "bullseyeKdrew.mp3");
  file.amp(0.1); // sets max amplitude to be .1 
  amp = new Amplitude(this);
  amp.input(file);
  file.play();
}

float huePicker(int numiterations) {
  // selects a hue for HGB mode/ color
  // n is num of iterations before passing escape radius
  // selects a hue with an algorithm depending 
  // on the value of norm before passing the
  // escape radius
  return numiterations - (log (log (sqrt(norm))));
}

void draw() {
  float vol = amp.analyze(); // volume/amplitude from 0 to .1
  fractal(vol);
  server.sendScreen();
}

void fractal(float vol) {
  float zoomFactor = map(vol, 0, 0.1, 1, 100);
  if (millis() - initialTime > interval){
    // increment time as an int
    time = time + 1;
    // reset counter
    initialTime = millis();
  }
  float ca = -.4 + cos(angle*1.69);
  float cb = -.59 + sin(angle);
  //print(zoomIn);
  //print("      ");
  if (zoomIn) {
    angle += 0.008; // 0.008
  }
  else {
    angle -= 0.0005;//random(-0.001, 0.001);
    //angle -= 0.002;
  }
  
  background(255);
  print(zoomFactor);
  print("    ");
  if (zoomFactor > 99.4) {  // 95 // 98
    zoomIn = true;
  }
  else {
    zoomIn = false;
  }
  //if (int(time) % 4 < 2) {
  //  zoomIn = true;
  //}else{
  //  zoomIn = false;
  //}
  if (w < 2) { // Zoomed in too much check
    w += random(0.8,2.0);
  }
  if (h < 2) {
    h += random(0.8,2.0);
  }
  if (w > 5.0) { // zoomed out too much check
    w -= random(0.8,2.0);
  }
  if (h > 5.0) {
    h -= random(0.8,2.0);
  }
  if (zoomIn) {
    zoomFactor = map(vol, 0, 0.1, 0.04, 0.1); // 0.04
    //zoomFactor = map(vol, 0, 0.1, 0.012, 0.04); // 0.04
    w -= zoomFactor;
    h -= zoomFactor;
    //w -= 0.016;
    //h -= 0.016;
    //print(w);
    //print("                      ");
    //print(h);
    //print("                      ");
  }
  else {
    zoomFactor = map(vol, 0, 0.1, 0.011, 0.01);
    w += zoomFactor;
    h += zoomFactor;
    //w += 0.015;
    //h += 0.015;
  }

  // Start at negative half the width and height
  float xmin = -w/2;
  float ymin = -h/2;

  // Make sure we can write to the pixels[] array.
  // Only need to do this once since we don't do any other drawing.
  loadPixels();

  // Maximum number of iterations for each point on the complex plane
  int maxiterations = 420; //100

  // x goes from xmin to xmax
  float xmax = xmin + w;
  // y goes from ymin to ymax
  float ymax = ymin + h;

  // Calculate amount we increment x,y for each pixel
  float dx = (xmax - xmin) / (width);
  float dy = (ymax - ymin) / (height);

  // Start y
  float y = ymin;
  for (int j = 0; j < height; j++) {
    // Start x
    float x = xmin;
    for (int i = 0; i < width; i++) {
      float a = x;
      float b = y;
      int n = 0;
      while (n < maxiterations) {
        float aa = a * a;
        float bb = b * b;
        if (aa + bb > 4.0) {
          norm = sqrt(aa*aa + bb*bb);
          break;  // Bail
        }
        float twoab = 2.0 * a * b;
        a = aa - bb + ca;
        b = twoab + cb;
        n++;
      }

      if (n == maxiterations) {
        pixels[i+j*width] = color(25);
        angle += 0.0000009; //0.0000004
      } else {
        //float hu = sqrt(float(n) / maxiterations);
        float hu = huePicker(n);
        pixels[i+j*width] = color(hu, 255, 255);
        
      }
      x += dx;
    }
    y += dy;
  }
  updatePixels();
  //println(frameRate);
  //if(mouseX<200&&mouseY<200){
  //  line(pmouseX,pmouseY,mouseX,mouseY);
  //}
  reflect();
}

void reflect() {
  PImage img = get(0,0,200,200);
  image(img,0,0);
  pushMatrix();
  translate(0,height);
  scale(1,-1);
  image(img,0,0);
  popMatrix();
  pushMatrix();
  translate(width,0);
  scale(-1,1);
  image(img,0,0);
  popMatrix();
  img = get(0,height/2,200,200);
  translate(width,height);
  image(img,0,0);
}
